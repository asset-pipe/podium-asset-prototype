import { html } from '../../lit-html/lit-html.js';
import { property, customElement } from '../../lit-element/lib/decorators.js';
import { css } from '../../lit-element/lib/css-tag.js';
import { WiredBase } from '../../wired-lib/lib/wired-base.js';
import { rectangle } from '../../wired-lib/lib/wired-lib.js';

var __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (undefined && undefined.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
let WiredInput = class WiredInput extends WiredBase {
    constructor() {
        super(...arguments);
        this.placeholder = '';
        this.type = 'text';
        this.autocomplete = '';
        this.autocapitalize = '';
        this.autocorrect = '';
        this.disabled = false;
        this.required = false;
        this.autofocus = false;
        this.readonly = false;
    }
    static get styles() {
        return css `
    :host {
      display: inline-block;
      position: relative;
      padding: 5px;
      font-family: sans-serif;
      width: 150px;
      outline: none;
      opacity: 0;
    }

    :host(.wired-rendered) {
      opacity: 1;
    }
  
    :host(.wired-disabled) {
      opacity: 0.6 !important;
      cursor: default;
      pointer-events: none;
    }
  
    :host(.wired-disabled) svg {
      background: rgba(0, 0, 0, 0.07);
    }
  
    .overlay {
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      pointer-events: none;
    }
  
    svg {
      display: block;
    }
  
    path {
      stroke: currentColor;
      stroke-width: 0.7;
      fill: transparent;
    }
  
    input {
      display: block;
      width: 100%;
      box-sizing: border-box;
      outline: none;
      border: none;
      font-family: inherit;
      font-size: inherit;
      font-weight: inherit;
      color: inherit;
      padding: 6px;
    }
    `;
    }
    render() {
        return html `
    <input id="txt" name="${this.name}" type="${this.type}" placeholder="${this.placeholder}" ?disabled="${this.disabled}"
      ?required="${this.required}" autocomplete="${this.autocomplete}" ?autofocus="${this.autofocus}" minlength="${this.minlength}"
      maxlength="${this.maxlength}" min="${this.min}" max="${this.max}" step="${this.step}" ?readonly="${this.readonly}"
      size="${this.size}" autocapitalize="${this.autocapitalize}" autocorrect="${this.autocorrect}" @change="${this.onChange}">
    <div class="overlay">
      <svg id="svg"></svg>
    </div>
    `;
    }
    createRenderRoot() {
        return this.attachShadow({ mode: 'open', delegatesFocus: true });
    }
    get input() {
        if (this.shadowRoot) {
            return this.shadowRoot.getElementById('txt');
        }
        return null;
    }
    get value() {
        const input = this.input;
        return (input && input.value) || '';
    }
    set value(v) {
        if (this.shadowRoot) {
            const input = this.input;
            if (input) {
                input.value = v;
            }
        }
        else {
            this.pendingValue = v;
        }
    }
    firstUpdated() {
        this.value = this.value || this.getAttribute('value') || '';
    }
    updated(changed) {
        if (changed.has('disabled')) {
            this.refreshDisabledState();
        }
        const svg = this.shadowRoot.getElementById('svg');
        while (svg.hasChildNodes()) {
            svg.removeChild(svg.lastChild);
        }
        const s = this.getBoundingClientRect();
        svg.setAttribute('width', `${s.width}`);
        svg.setAttribute('height', `${s.height}`);
        rectangle(svg, 0, 0, s.width, s.height);
        if (typeof this.pendingValue !== 'undefined') {
            this.input.value = this.pendingValue;
            delete this.pendingValue;
        }
        this.classList.add('wired-rendered');
    }
    refreshDisabledState() {
        if (this.disabled) {
            this.classList.add('wired-disabled');
        }
        else {
            this.classList.remove('wired-disabled');
        }
    }
    onChange(event) {
        event.stopPropagation();
        this.fireEvent(event.type, { sourceEvent: event });
    }
};
__decorate([
    property({ type: String }),
    __metadata("design:type", Object)
], WiredInput.prototype, "placeholder", void 0);
__decorate([
    property({ type: String }),
    __metadata("design:type", String)
], WiredInput.prototype, "name", void 0);
__decorate([
    property({ type: String }),
    __metadata("design:type", String)
], WiredInput.prototype, "min", void 0);
__decorate([
    property({ type: String }),
    __metadata("design:type", String)
], WiredInput.prototype, "max", void 0);
__decorate([
    property({ type: String }),
    __metadata("design:type", String)
], WiredInput.prototype, "step", void 0);
__decorate([
    property({ type: String }),
    __metadata("design:type", Object)
], WiredInput.prototype, "type", void 0);
__decorate([
    property({ type: String }),
    __metadata("design:type", Object)
], WiredInput.prototype, "autocomplete", void 0);
__decorate([
    property({ type: String }),
    __metadata("design:type", Object)
], WiredInput.prototype, "autocapitalize", void 0);
__decorate([
    property({ type: String }),
    __metadata("design:type", Object)
], WiredInput.prototype, "autocorrect", void 0);
__decorate([
    property({ type: Boolean, reflect: true }),
    __metadata("design:type", Object)
], WiredInput.prototype, "disabled", void 0);
__decorate([
    property({ type: Boolean }),
    __metadata("design:type", Object)
], WiredInput.prototype, "required", void 0);
__decorate([
    property({ type: Boolean }),
    __metadata("design:type", Object)
], WiredInput.prototype, "autofocus", void 0);
__decorate([
    property({ type: Boolean }),
    __metadata("design:type", Object)
], WiredInput.prototype, "readonly", void 0);
__decorate([
    property({ type: Number }),
    __metadata("design:type", Number)
], WiredInput.prototype, "minlength", void 0);
__decorate([
    property({ type: Number }),
    __metadata("design:type", Number)
], WiredInput.prototype, "maxlength", void 0);
__decorate([
    property({ type: Number }),
    __metadata("design:type", Number)
], WiredInput.prototype, "size", void 0);
WiredInput = __decorate([
    customElement('wired-input')
], WiredInput);

export { WiredInput };
