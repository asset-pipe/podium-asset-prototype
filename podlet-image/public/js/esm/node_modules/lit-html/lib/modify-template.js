import{isTemplatePartActive as e}from"./template.js";const n=133;function t(e,t){const{element:{content:r},parts:l}=e,u=document.createTreeWalker(r,n,null,!1);let c=o(l),d=l[c],i=-1,s=0;const f=[];let a=null;for(;u.nextNode();){i++;const e=u.currentNode;for(e.previousSibling===a&&(a=null),t.has(e)&&(f.push(e),null===a&&(a=e)),null!==a&&s++;void 0!==d&&d.index===i;)d.index=null!==a?-1:d.index-s,d=l[c=o(l,c)]}f.forEach(e=>e.parentNode.removeChild(e))}const r=e=>{let t=11===e.nodeType?0:1;const r=document.createTreeWalker(e,n,null,!1);for(;r.nextNode();)t++;return t},o=(n,t=-1)=>{for(let r=t+1;r<n.length;r++){const t=n[r];if(e(t))return r}return-1};function l(e,t,l=null){const{element:{content:u},parts:c}=e;if(null==l)return void u.appendChild(t);const d=document.createTreeWalker(u,n,null,!1);let i=o(c),s=0,f=-1;for(;d.nextNode();){for(f++,d.currentNode===l&&(s=r(t),l.parentNode.insertBefore(t,l));-1!==i&&c[i].index===f;){if(s>0){for(;-1!==i;)c[i].index+=s,i=o(c,i);return}i=o(c,i)}}}export{l as insertNodeIntoTemplate,t as removeNodesFromTemplate};
